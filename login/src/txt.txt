<dependency> ... spring-boot-starter-security ... </dependency>
위의 코드는 스프링 시큐리티에 필요한 기본 의존성을 자동으로 추가합니다.
애플리케이션에 보안 기능을 추가하려면 이 의존성을 추가하고, 필요한 경우에는 스프링 시큐리티 설정을 추가하여 커스터마이징할 수 있습니다.

<dependency> ... spring-security-test ... </dependency>
이 의존성은 주로 테스트 코드에서 스프링 시큐리티를 테스트하는 데 사용됩니다.
스프링 시큐리티의 테스트 지원을 제공하는 의존성으로, 테스트에서 스프링 시큐리티 관련 기능을 쉽게 테스트할 수 있도록 도와줍니다.


BCrypt 암호화 메소드
Spring Security 에서는 회원가입시 비밀번호를 반드시 암호화하는 것이 권장됩니다.

스프링 시큐리티는 사용자 인증(로그인)시 비밀번호에 대해 단방향 해시 암호화를 진행하여 저장되어 있는 비밀번호와 대조한다.
따라서 회원가입시 비밀번호 항목에 대해서 암호화를 진행해야 한다.
- 스프링 시큐리티는 암호화를 위해 BCrypt Password Encoder를 제공하고 권장한다.

단방향 해시 암호화
- 양방향
    - 대칭키
    - 비대칭키
- 단방향
    - 해시 => 복호화 불가능. 스프링 시큐리티가 권장하는방식이다.


세션 로그인일 경우 서버에서 데이터를 저장하고 클라이언트에게 응답하는 방식이다.
JWT 토큰 로그인 방식은 서버에 저장하지 않고, JWTUtil에서 토큰을 생성해 클라이언트에게 인가 해주는 방식이다.
jwt 토큰 발행중에 동일한 아이디가 있더라도 토큰을 만들고 반환후에 세션은 소멸된다.


스프링 시큐리티 필터 동작 원리
스프링 시큐리티는 클라이언트의 요청이 여러개의 필터를 거쳐 DispatcherServlet(Controller)으로 향하는 중간 필터에서 요청을 가로챈 후 검증(인증/인가)을
진행합니다.

- 클라이언트 요청 -> 서블릿 필터 -> 서블릿(컨트롤러)

클라이언트 요청이오면 서블릿 컨테이너(톰캣)에 존재하는 필터 체인에 DelegatingFilter를 등록한 뒤 모든 요청을 가로챈다.

서블릿 필터 체인의 DelegatingFilter -> Security 필터 체인(내부 처리 후) -> 서블릿 필터 체인의 DelegatingFilter
가로챈 요청은 SecurityFilterChain에서 처리 후 상황에 따른 거부, 리다렉션, 서블릿으로 요청 전달을 진행한다.

SecurityFilterChain의 필터 목록과 순서는 엄청 많다. 그중에서
Form 로그인 방식에서 UsernamePasswordAuthenticationFilter이 있다.

Form 로그인 방식에서는 클라이어트단이 username과 password를 전송한 뒤 Security 필터를 통과하는데 UsernamePasswordAuthenticationFilter 필터에서 회원
검증을 시작한다.
(회원 검증의 경우 UsernamePasswordAuthenticationFilter가 호출한 AuthenticationManager를 통해 진행하며 DB에서 조회한 데이터를 통해 받아온다.)

JWT 프로젝트는 SecurityConfig에서 formLogin 방식을 disable 했기 때문에 기본적으로 활성화 되어 있는 해당 필터는 동작하지 않는다.
따라서 로그인을 진행하기 위해서 필터를 커스텀하여 등록해야 한다.

JWT 로그인 로직 구현 목표
- 아이디, 비밀번호 검증을 위한 커스텀 필터 작성
- DB에 저장되어 있는 회원 정보를 기반으로 검증할 로직 작성
- 로그인 성공시 JWT를 반환할 success 핸들러 생성
- 커스텀 필터 SecurityConfig 등록


JWT 발급과 검증
- 로그인시 -> 성공 -> JWT 발급
- 접근시 -> JWT 검증

JWT에 관해 발급과 검증을 담당할 클래스가 필요하다. 따라서 JWTUtil이라는 클래스를 생성하여 jwt 발급, 검증 메소드를 작성해줘야 한다.
JWT는 Header.Payload.Signature 구조로 이루어져있다.

Header
    - JWT임을 명시
    - 사용된 암호화 알고리즘
Payload
    - 정보
Signature
    - 암호화알고리즘(BASE64(Header)+(BASE64(Payload)) + 암호화키)

jwt 특징은 내부 정보를 단순 base64 방식으로 인코딩할기 때문에 외부에서 쉽게 디코딩 할 수 있다.
외부에서 열람해도 되는 정보를 담아야하며, 토큰 자체의 발급처를 확인하기 위해서 사용한다.


jwt 검증 필터
스프링 시큐리티 filter chain에 요청에 담긴 jwt를 검증하기 위한 커스텀 필터를 등록해야 한다.
해당 필터를 통해 요청 헤더 authorization 키에 jwt가 존재하는 경우 jwt를 검증하고 강제로 SecurityContextHolder에 세션을 생성한다.
이 세션은 statless 상태로 관리되기 대문에 해당 요청이 끝나면 소멸된다.